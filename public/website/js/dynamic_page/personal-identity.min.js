let recaptchaReset = function(action) {
    grecaptcha.ready(function() {
        grecaptcha.execute(siteKey, {action: action}).then(function(token) {
            $('#btn-update').prop('disabled', false);
            $('#recaptcha-key').val(token);
        });
    });
}

const prepareSubmit = function () {
    $('#btn-update').find('.submit-text').hide();
    $('#btn-update').find('.loading').css('display', 'inline-block');
    $('#btn-update').prop('disabled', true);
}

const afterSubmit = function () {
    $('#btn-update').find('.submit-text').show();
    $('#btn-update').find('.loading').css('display', 'none');
    $('.error-update').remove();

    setTimeout(function(){
        $('#btn-update').prop('disabled', false);
    }, 3000);
}

const getRegions = function(url, element, param = null, child = null) {
    let query = buildQuery(param);
    let elementValue = $(element).val();
    $.ajax({
        url: url + '?' + query,
        type: 'GET',
        dataType: "json",
        success: function (data) {
            let opt = '';
            data.forEach((v) => {
                let selected  = '';
                if (v.id == elementValue) {
                    selected = 'selected';
                }
                opt += `<option value="${v.id}" ${selected}>${v.text}</option>`
            });

            $(element).chosen('destroy').empty().append(opt);
            $(element).chosen();

            let childId = $(element).data('child');

            if (childId != null && childId != undefined) {
                let attributChild = $(element).data('parent-param');
                let valueChild = $(element).val();
                getRegions($(element).data('child-url'), childId, {[attributChild] : valueChild})
            }
        },
        statusCode: {
            500 : function (data) {
                console.log('Internal Server Error')
            }
        }
    });
}

const buildQuery = function (data) {
    if (typeof (data) === 'string') return data;

    var query = [];

    for (var key in data) {
        if (data.hasOwnProperty(key)) {
            query.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));
        }
    }

    return query.join('&');
};

const datePickerInit = function() {
    $('.datepicker').datepicker({
        format: 'dd-mm-yyyy',
        autoclose: true,
        orientation: "bottom"
    });
}

$(function() {
    if ($(window).width() < 800) {
        if (localStorage.getItem('keep_use_device') != 1) {
            Swal.fire({
              title: 'Device Kurang Lebar :(',
              text: "Demi kemudahan Anda, untuk pengisian form kami sarankan menggunakan laptop atau komputer",
              type: 'info',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#ccc',
              confirmButtonText: 'Gunakan device ini',
              cancelButtonText: 'Tutup',
            }).then((result) => {
              if (result.value) {
                localStorage.setItem('keep_use_device','1');
              }
            })
        }
    }

    datePickerInit();

    $('.year-input').datepicker({
        format: 'yyyy',
        viewMode: "years",
        minViewMode: "years",
        autoclose: true,
        orientation: "bottom"
    });
});
$(function(){
	recaptchaReset('personal_identity');
	let defaultPhoto = "/website/images/avatar/avatar.png";

	getRegions('/ajax/provinces', '#province-address');
	getRegions('/ajax/provinces', '#province-domicile');

	$('#btn-update').on('click', function(e) {
		e.preventDefault();
		prepareSubmit();

		let form = $('#personal-identity-form');

		$.ajax({
	        url: '/profiles/personal-identity',
	        type: 'POST',
	        data: new FormData(form[0]),
		    cache: false,
		    contentType: false,
		    processData: false,
	        success: function (data) {
	        	if (data.success) {
	        		Toast.fire({
					    type: 'success',
					    title: data.message
					});
	        		recaptchaReset('personal_identity');
	        	}
	        	afterSubmit();
	        },
	        statusCode: {
	        	422 : function (data) {
	        		recaptchaReset('personal_identity');
	        		afterSubmit();
	        		Toast.fire({
					    type: 'error',
					    title: 'Mohon koreksi ulang inputan Anda'
					});
	        		let response = data.responseJSON;
				    let errors = response.errors
				    for (error in errors){
				    	let errorNames = error.split('.');
				    	let errorName = '';

				    	if (errorNames.length > 1) {
				    		errorNames.forEach((v, i ) => {
					    		if (i != errorNames.length) {
						    		if (i == 0) {
						    			errorName += v + '[';
						    		} else {
						    			errorName += v + '][';
						    		}
						    	}
					    	});

					    	errorName = errorName.slice(0, -1);
				    	} else {
				    		errorName = error;
				    	}

				        let element = form.find('[name="'+errorName+'"]');
				        element.after(`<span class="text-danger error-update">${errors[error].join('. ')}</span>`);
				    }
	        	},
	        	400 : function (data) {
	        		Toast.fire({
					    type: 'error',
					    title: data.responseJSON.message
					});
	        		recaptchaReset('personal_identity');
	        		afterSubmit();
	        	},
	            500 : function (data) {
	            	Toast.fire({
					    type: 'error',
					    title: 'Internal server error'
					});
	        		recaptchaReset('personal_identity');
	        		afterSubmit();
	            }
	        }
	    });
	});

	$('#province-address, #district-address, #sub-district-address, #province-domicile, #district-domicile, #sub-district-domicile').on('change', function() {
		let childId = $(this).data('child');
		let attributChild = $(this).data('parent-param');
    	let valueChild = $(this).val();
    	getRegions($(this).data('child-url'), childId, {[attributChild] : valueChild})
	});

	$('#browse-photo').on('click', function() {
		$('#photo').trigger('click');
	});

	$('#deleted-photo-icon').on('click', function(e) {
		e.preventDefault();
		$('#photo-img').attr('src', defaultPhoto);
		$('#photo').val('');
	});

	$('#photo').on('change', function() {
		var file = this.files[0];
        var reader = new FileReader();
        reader.onloadend = function () {
           $('#photo-img').attr('src', reader.result);
        }

        if (file) {
            reader.readAsDataURL(file);
        }
	});

	$('.sim-select').on('change', function() {
		let checked = $(this).prop('checked');
		let target = $(this).data('id');

		if (checked) {
			$(target).prop('disabled', false);
		} else {
			$(target).prop('disabled', true);
		}
	});
});